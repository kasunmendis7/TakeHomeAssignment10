#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *left;
    struct node *right;
};

struct node* insert(struct node* root, int data){
    if(root == NULL){
        struct node* node = (struct node*)malloc(sizeof(struct node));
        node->data = data;
        node->left = NULL;
        node->right = NULL;
        return node;
    }else{
        struct node* cur;
        if(data <= root->data){
            cur = insert(root->left, data);
            root->left = cur;
        }else{
            cur = insert(root->right, data);
            root->right = cur;
        }
        return root;
    }
}
/* you only have to complete the function given below 
struct node{
    int data;
    struct node *left;
    struct node *right;
};
*/
struct node *lca(struct node *root, int v1, int v2){
    if(root == NULL){
        return NULL;
    }
    if(root->data < v1 && root->data < v2){
        return lca(root->right, v1, v2);
    }
    if(root->data > v1 && root->data >v2){
        return lca(root->left, v1, v2);
    }
    return root;
}

int main(){
    int m;
    int n;
    int v1, v2;
    //user input to get the number of nodes to be inserted into the binary search tree
    scanf("%d", &n);
    printf("Enter data greater than or equal to 1 and less than or equal to 25\n");
    struct node *root = NULL;
    for(int i=0;i<n;i++){
        scanf("%d", &m);
        if(1<=m && m<=25){
            root = insert(root, m);
        }else{
            printf("Invalid input!");
            return 1;
        }
    }
    //user input of the nodes in which the least common  ancestor is to be found
    scanf("%d", &v1);
    scanf("%d", &v2);
    //checking whether the user input is obeys the constraints given in the question
    if(v1 == v2 || v1<1 || v2<1 || v1>25 ||v2>25){
        printf("Invalid Input");
        return 1;
    }
    struct node *common = lca(root, v1, v2);
    printf("%d", common->data);
    return 0;
}
